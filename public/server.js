availableUsers=[];rooms=[];module.exports={io:e=>{e.on("nU",({type:o="online",friendRoom:i="",createRoom:n=!1,player:r={}},s)=>{const t=availableUsers.filter(e=>e.type===o&&e.player.token!==r.token);if(0!==t.length&&!n||"friend"===o&&!n){let n=-1;if("online"===o&&(n=randomNumber(0,t.length-1)),"friend"===o&&(n=t.findIndex(e=>e.room===i))<0)return s("Invalid Room");if(n<0)return s("Type invalid");const a=randomNumber(0,1),l=t[n].room,d=t[n].player,m=randomNumber(1,2),p={room:l,playerStartsGame:1===m?d.token:r.token,p1:{...d,color:a+1},p2:{...r,id:e.id,color:+!a+1}};e.join(l),rooms.push(p);const c=availableUsers.findIndex(e=>e.room===l);availableUsers.splice(c,1),io.sockets.in(l).emit("sG",p)}else{const n=String("online"===o?guid():i);availableUsers.push({room:n,type:o,player:{...r,id:e.id}}),e.join(n)}s()}),e.on("action",e=>{io.sockets.in(e.room).emit("action",e)}),e.on("disconnect",()=>{const o=rooms.findIndex(({p1:o,p2:i})=>o.id===e.id||i.id===e.id);if(o>=0)io.sockets.in(rooms[o].room).emit("pD"),rooms.splice(o,1);else{const o=availableUsers.findIndex(({player:o})=>o.id===e.id);o>=0&&availableUsers.splice(o,1)}})}};